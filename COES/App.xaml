<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:COES.ViewModels"
             xmlns:views="clr-namespace:COES.Views"
             xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" x:Class="COES.App"
             StartupUri="Views/Application.xaml"
             mc:Ignorable="d">

    <Application.Resources>
    	<ResourceDictionary>
    		<ResourceDictionary.MergedDictionaries>
    			<ResourceDictionary Source="Simple Styles.xaml"/>
    		</ResourceDictionary.MergedDictionaries>
    		<!--Global View Model Locator-->
    		<vm:ViewModelLocator x:Key="Locator"
    			d:IsDataSource="True" />
    		<DataTemplate DataType="{x:Type vm:HomeViewModel}">
    			<views:Home />
    		</DataTemplate>
    		<DataTemplate DataType="{x:Type vm:CustomerViewModel}">
    			<views:Customer />
    		</DataTemplate>
    		<DataTemplate DataType="{x:Type vm:OrderViewModel}">
    			<views:Order />
    		</DataTemplate>
            <DataTemplate DataType="{x:Type vm:PaymentViewModel}">
                <views:Payment />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:ReportingViewModel}">
                <views:Reporting />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:EditMenuViewModel}">
                <views:EditMenu />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:RestaurantManagerViewModel}">
                <views:RestaurantManager />
            </DataTemplate>


            <!--Double-->
    		<System:Double x:Key="ViewWidth">1200</System:Double>
    		<System:Double x:Key="ViewHeight">938</System:Double>
    		<System:Double x:Key="GroupBoxHeaderSize">27</System:Double>
    		<System:Double x:Key="HeaderSize">40</System:Double>
    		<System:Double x:Key="TextBoxWidthSmall">280</System:Double>
            <System:Double x:Key="ButtonHeight">120</System:Double>
            <System:Double x:Key="ButtonWidth">275</System:Double>
            
            <!--Int-->
    		<System:Int32 x:Key="PhoneNumberMaxLength">10</System:Int32>
            
            <!--SolidColorBrushes-->
    		<SolidColorBrush x:Key="HeaderBrush" Color="Black"/>
            <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
            <SolidColorBrush x:Key="ButtonBackgroundClear" Color="#00000000"/>
            <SolidColorBrush x:Key="ButtonMouseoverBrush" Color="{DynamicResource ButtonMouseover}"/>
            <SolidColorBrush x:Key="ButtonPressedBrush" Color="#59FFF500"/>

            <!--Thickness-->
            <Thickness x:Key="FooterMargin">0,0,0,15</Thickness>
    		
    		<!--LinearGradientBrush-->
    		<LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
    			<GradientStop Color="#ABADB3" Offset="0.05"/>
    			<GradientStop Color="#E2E3EA" Offset="0.07"/>
    			<GradientStop Color="#E3E9EF" Offset="1"/>
    		</LinearGradientBrush>
    		<LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
    			<GradientStop Color="#F3F3F3" Offset="0"/>
    			<GradientStop Color="#EBEBEB" Offset="0.5"/>
    			<GradientStop Color="#DDDDDD" Offset="0.5"/>
    			<GradientStop Color="#CDCDCD" Offset="1"/>
    		</LinearGradientBrush>
    		
            <!--Color-->
    		<Color x:Key="ButtonMouseover">#26FFF500</Color>

            <!--Style-->
    		<Style x:Key="ButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    			<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
    			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
    			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
    						<Grid x:Name="Grid">
    							<Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" Background="#00000000"/>
						
    							<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
    							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
    						</Grid>
					
					<!--Each state sets a brush on the Border in the template -->
    						<ControlTemplate.Triggers>
    							<Trigger Property="IsKeyboardFocused" Value="true"/>
    							<Trigger Property="IsMouseOver" Value="true">
    								<Setter Property="Background" TargetName="Border" Value="{DynamicResource ButtonMouseoverBrush}"/>
    							</Trigger>
    							<Trigger Property="IsPressed" Value="true">
    								<Setter Property="Background" TargetName="Border" Value="{DynamicResource ButtonPressedBrush}"/>
    							</Trigger>
    							<Trigger Property="IsEnabled" Value="true"/>
    							<Trigger Property="IsEnabled" Value="false">
    								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
    								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
    							</Trigger>
    						</ControlTemplate.Triggers>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    		<Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
    			<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    			<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    			<Setter Property="AllowDrop" Value="true"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type TextBox}">
    						<Grid>
    							<Border x:Name="Border" BorderThickness="1" Padding="2" CornerRadius="2">
							
							<!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
    								<ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}"/>
						
    							</Border>
    						</Grid>
    						<ControlTemplate.Triggers>
    							<Trigger Property="IsEnabled" Value="False">
    								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
    							</Trigger>
    						</ControlTemplate.Triggers>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    		<SolidColorBrush x:Key="ListBorder" Color="#828790"/>
    		<Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
    			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    			<Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
    			<Setter Property="BorderThickness" Value="1"/>
    			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    			<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    			<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    			<Setter Property="VerticalContentAlignment" Value="Center"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type ListBox}">
    						<Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
    							<ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
    								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    							</ScrollViewer>
    						</Border>
    						<ControlTemplate.Triggers>
    							<Trigger Property="IsEnabled" Value="false">
    								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
    							</Trigger>
    							<Trigger Property="IsGrouping" Value="true">
    								<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
    							</Trigger>
    						</ControlTemplate.Triggers>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    		<Style x:Key="AddButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    			<Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}"/>
    			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
    			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type Button}">
					
					<!-- We use Grid as a root because it is easy to add more elements to customize the button -->
    						<Grid x:Name="Grid">
    							<Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Background="#00000000" CornerRadius="5"/>
						
    							<!-- Content Presenter is where the text content etc is placed by the control -->
						<!-- The bindings are useful so that the control can be parameterized without editing the template -->
    							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
    						</Grid>
					
					<!--Each state sets a brush on the Border in the template -->
    						<ControlTemplate.Triggers>
    							<Trigger Property="IsKeyboardFocused" Value="true"/>
    							<Trigger Property="IsMouseOver" Value="true">
    								<Setter Property="Background" TargetName="Border" Value="{DynamicResource ButtonMouseoverBrush}"/>
    							</Trigger>
    							<Trigger Property="IsPressed" Value="true">
    								<Setter Property="Background" TargetName="Border" Value="{DynamicResource ButtonPressedBrush}"/>
    							</Trigger>
    							<Trigger Property="IsEnabled" Value="true"/>
    							<Trigger Property="IsEnabled" Value="false">
    								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
    								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
    							</Trigger>
    						</ControlTemplate.Triggers>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    		<Style x:Key="MenuItemListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
    			<Setter Property="Background" Value="Transparent"/>
    			<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    			<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    			<Setter Property="Padding" Value="2,0,0,0"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type ListBoxItem}">
    						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
    							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    						</Border>
    						<ControlTemplate.Triggers>
    							<Trigger Property="IsSelected" Value="true">
    								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
    								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
    							</Trigger>
    							<MultiTrigger>
    								<MultiTrigger.Conditions>
    									<Condition Property="IsSelected" Value="true"/>
    									<Condition Property="Selector.IsSelectionActive" Value="false"/>
    								</MultiTrigger.Conditions>
    								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
    								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    							</MultiTrigger>
    							<Trigger Property="IsEnabled" Value="false">
    								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    							</Trigger>
    						</ControlTemplate.Triggers>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    		<DataTemplate x:Key="MenuItemTemplate">
    			<Grid>
    				<Grid.ColumnDefinitions>
    					<ColumnDefinition/>
    					<ColumnDefinition/>
    					<ColumnDefinition/>
    					<ColumnDefinition/>
    				</Grid.ColumnDefinitions>
    				<TextBlock TextWrapping="Wrap" Text="{Binding Value, Mode=OneWay}" Margin="0,0,0,4.04" d:LayoutOverrides="Width, Height"/>
    				<TextBlock Margin="0,0,0,4.04" TextWrapping="Wrap" d:LayoutOverrides="Width, Height" Grid.Column="1"><Run Text="x"/></TextBlock>
    				<TextBlock Margin="0,0,0,4.04" TextWrapping="Wrap" Text="{Binding Key.Name}" d:LayoutOverrides="Width, Height" Grid.Column="2"/>
    				<TextBlock Grid.Column="3" TextWrapping="Wrap" d:LayoutOverrides="Width, Height">
                        <Run Text="($"/>
                        <TextBlock Text="{Binding Key.Cost}"/>
                        <Run Text="ea.)"/>
                    </TextBlock>
    			</Grid>
    		</DataTemplate>
    		<SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>
    		<Style x:Key="CheckRadioFocusVisual">
    			<Setter Property="Control.Template">
    				<Setter.Value>
    					<ControlTemplate>
    						<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    		<Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
    			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    			<Setter Property="Background" Value="#F4F4F4"/>
    			<Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
    			<Setter Property="BorderThickness" Value="1"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type RadioButton}">
    						<BulletDecorator Background="Transparent" VerticalAlignment="Center">
    							<BulletDecorator.Bullet>
    								<Microsoft_Windows_Themes:BulletChrome BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" IsChecked="{TemplateBinding IsChecked}" IsRound="true" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}"/>
    							</BulletDecorator.Bullet>
    							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    						</BulletDecorator>
    						<ControlTemplate.Triggers>
    							<Trigger Property="HasContent" Value="true">
    								<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
    								<Setter Property="Padding" Value="4,0,0,0"/>
    							</Trigger>
    							<Trigger Property="IsEnabled" Value="false">
    								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    							</Trigger>
    						</ControlTemplate.Triggers>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Style>
    	</ResourceDictionary>
    </Application.Resources>

</Application>
